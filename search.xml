<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>How to Set up FTP Server on Your Raspberry Pi</title>
      <link href="/2021/11/12/How-to-Set-up-FTP-Server-on-Your-Raspberry-Pi/"/>
      <url>/2021/11/12/How-to-Set-up-FTP-Server-on-Your-Raspberry-Pi/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction">Introduction</h2><p>FTP (<strong>F</strong>ile <strong>T</strong>ransfer <strong>P</strong>rotocol) is a network protocol used to transfer files between two machines. Setting up an FTP server on Raspberry Pi is simple but make sure you do not transfer sensitive data as this protocol does not use encryption.</p><p><strong>In this tutorial, you will learn to set up an FTP server on your Raspberry Pi.</strong><br><img src="/images/how-to-set-up-ftp-server-on-your-raspberry-pi.png" alt="how-to-set-up-ftp-server-on-your-raspberry-pi.png"></p><h2 id="Prerequisites">Prerequisites</h2><ul><li>list itemRaspberry Pi OS installed on your device</li><li>Memory card</li><li>Network connection</li><li>Account with root privileges</li></ul><h2 id="Raspberry-Pi-FTP-Server-Setup-Guide">Raspberry Pi FTP Server Setup Guide</h2><p>Setting up the FTP server requires:</p><ol><li>A server utility.</li><li>Changes in some configuration files.</li><li>Setting up the server directory.</li><li>Modifying permissions for the server user.</li></ol><p>Follow these steps to set up an FTP server on your Raspberry Pi:</p><h3 id="Step-1-Update-System-Packages">Step 1: Update System Packages</h3><p>Before installing the FTP utility, update the system package repositories and run an upgrade:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt full-upgrade</span><br></pre></td></tr></table></figure><p>Confirm with Y and wait for the upgrade to complete.</p><h3 id="Step-2-Install-FTP-Server">Step 2: Install FTP Server</h3><p>There are several utilities available for setting up an FTP server on Raspberry Pi. In this tutorial, we will use the open-source <strong>vsftpd</strong> utility.</p><p>The vsftpd utility is lightweight, secure, and easy to use.</p><p>Install <strong>vsftpd</strong> on the Raspberry Pi by running:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install vsftpd</span><br></pre></td></tr></table></figure><h3 id="Step-3-Edit-Configuration-File">Step 3: Edit Configuration File</h3><p>Before connecting to the FTP server, modify the settings in the <strong>vsftpd configuration file</strong> using a text editor, for example, nano.</p><ol><li>Run the following command:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/vsftpd.conf</span><br></pre></td></tr></table></figure><p><img src="/images/edit-the-vsftpd-configuration-file.png" alt="edit-the-vsftpd-configuration-file.png"><br>2. Find (<strong>CTRL + W</strong>) and uncomment the following lines by removing the hash (#) sign:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">write_enable=YES</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local_umask=022</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chroot_local_user=YES</span><br></pre></td></tr></table></figure><ol start="3"><li>Find the following line:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anonymous_enable=YES</span><br></pre></td></tr></table></figure><p>Change it to:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anonymous_enable=NO</span><br></pre></td></tr></table></figure><ol start="4"><li>Add the following lines at the end of the config file:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_sub_token=$USER</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local_root=/home/$USER/FTP</span><br></pre></td></tr></table></figure><p>These settings lock the server users to the FTP folder within the home directory.</p><ol start="5"><li>Press <strong>CTRL + X</strong> and confirm with <strong>Y</strong> to save the settings and exit.</li></ol><h3 id="Step-4-Create-FTP-Directory">Step 4: Create FTP Directory</h3><p>Create an FTP directory to use for transferring files. A subdirectory is needed since the root directory cannot have write permissions.</p><p>Use the following syntax:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/[user]/FTP/[subdirectory_name]</span><br></pre></td></tr></table></figure><p>Replace <strong>[user]</strong> with the relevant user. Replace <strong>[subdirectory_name]</strong> with a name of your choice. The default user on Raspberry Pi OS is ‘pi.’</p><p>For example:<br><img src="/images/make-a-directory-on-the-ftp-server.png" alt="make-a-directory-on-the-ftp-server.png"><br>The <strong>-p</strong> argument instructs <strong>mkdir</strong> to create the entire path tree, both <em>FTP</em> and files directories.</p><h3 id="Step-5-Modify-Permissions">Step 5: Modify Permissions</h3><p>After adding the directory, remove the write permission from the FTP directory to prevent other users from adding files to it.</p><p>Use the following syntax:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a-w /home/[user]/FTP</span><br></pre></td></tr></table></figure><p>Replace the <strong>[user]</strong> syntax with the appropriate username.</p><p>For example:<br><img src="/images/remove-write-permissions-from-ftp-users.png" alt="remove-write-permissions-from-ftp-users.png"></p><h3 id="Step-6-Restart-Vsftpd-Daemon">Step 6: Restart Vsftpd Daemon</h3><p>To apply the changes, <strong>restart the vsftpd daemon</strong> by running:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service vsftpd restart</span><br></pre></td></tr></table></figure><p>Now the FTP server is set up and running on the Raspberry Pi.</p><h2 id="FTP-Server-Test">FTP Server Test</h2><p>Test the server using a remote machine and <strong>FileZilla</strong>, a popular FTP client that supports all platforms.</p><p>Follow these steps:</p><ol><li><strong>Install</strong> FileZilla on a remote machine.</li></ol><p>For example, on Ubuntu, run the command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install filezilla</span><br></pre></td></tr></table></figure><p>Confirm with <strong>Y</strong> and wait for the installation to complete.</p><ol start="2"><li>Obtain the Pi’s <strong>IP address</strong> by running the following command in the Raspberry Pi terminal:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p><img src="/images/obtain-ip-address-using-ifconfig.png" alt="obtain-ip-address-using-ifconfig.png"><br>In this case, we used the private IP address to connect locally.</p><ol start="3"><li>Open FileZilla on another machine and enter the Pi’s IP address, username, and password for the user you want to connect to. The default username is ‘pi,’ and the default password is ‘raspberry.’ Port number is 21.</li></ol><p>Click Quickconnect to establish a connection.<br><img src="/images/connect-to-ftp-server-using-filezilla-e1617614481523.png" alt="connect-to-ftp-server-using-filezilla-e1617614481523.png"><br>If the connection is successful, a message stating Connection established appears in the log.<br><img src="/images/establish-connection-to-ftp-server-using-filezilla-e1617614422961.png" alt="establish-connection-to-ftp-server-using-filezilla-e1617614422961.png"><br>4. On the remote machine, drag and drop some files from a source to the destination directory in FileZilla to make sure the connection is working.<br><img src="/images/transfer-file-to-ftp-server-using-filezilla-e1617614378774.png" alt="transfer-file-to-ftp-server-using-filezilla-e1617614378774.png"><br>If everything works, FileZilla states that the file transfer was successful. Our example is for a local transfer, but the procedure is the same in other cases.</p><h3 id="Conclusion">Conclusion</h3><p>Now you know how to set up an FTP server on your Raspberry Pi. The solution is simple and works well when transferring files between two computers. You can use this setup as private cloud storage and keep the costs low.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Raspberry </tag>
            
            <tag> FTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to change Raspberry Pi&#39;s Swapfile Size on Raspbian</title>
      <link href="/2021/11/11/How-to-change-Raspberry-Pi-s-Swapfile-Size-on-Raspbian/"/>
      <url>/2021/11/11/How-to-change-Raspberry-Pi-s-Swapfile-Size-on-Raspbian/</url>
      
        <content type="html"><![CDATA[<h2 id="Reason-Why">Reason Why</h2><p>Ever get the dreaded error:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Virtual memory exhausted: Cannot allocate memory</span><br></pre></td></tr></table></figure><p>With the first iterations of Raspberry Pi the Model A comes with 256mb of memory. While the Raspberry Pi B comes with a modest 512mb of memory. For most applications this amount of memory is actually quiet a bit. As soon as you start compiling your own binaries this amount starts to seem dismal.</p><p>*Insert reason why swap on flash-based memory is bad here.</p><h2 id="Limitations">Limitations</h2><p>The Raspbian distribution comes with a 100mb swapfile. This is actually a bit on the small side. A general rule of thumb is swapfile size should be about twice as much as the available RAM on the machine. In the examples below I have a Raspberry Pi B+. So the amount of swap I use is 1024mb.</p><h2 id="Commands">Commands</h2><p>We will change the configuration in the file */etc/dphys-swapfile *:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/dphys-swapfile</span><br></pre></td></tr></table></figure><p>The default value in Raspbian is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONF_SWAPSIZE=100</span><br></pre></td></tr></table></figure><p>We will need to change this to:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONF_SWAPSIZE=1024</span><br></pre></td></tr></table></figure><p>Then you will need to stop and start the service that manages the swapfile own Rasbian:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/dphys-swapfile stop</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/dphys-swapfile start</span><br></pre></td></tr></table></figure><p>You can then verify the amount of memory + swap by issuing the following command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free -m</span><br></pre></td></tr></table></figure><p>The output should look like:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">total     used     free   shared  buffers   cached</span><br><span class="line">Mem:           435       56      379        0        3       16</span><br><span class="line">-/+ buffers/cache:       35      399</span><br><span class="line">Swap:         1023        0     1023</span><br></pre></td></tr></table></figure><h2 id="Finished">Finished!</h2><p>That should be enough swap to complete any future compiles I may do in the future.</p>]]></content>
      
      
      <categories>
          
          <category> Raspberry </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Raspberry </tag>
            
            <tag> Swapfile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Install PHP 8.0 on Raspberry Pi</title>
      <link href="/2021/11/08/Install-PHP-8-0-on-Raspberry-Pi/"/>
      <url>/2021/11/08/Install-PHP-8-0-on-Raspberry-Pi/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/install_php_8_0_on_raspberry_pi_featured_image.png" alt="install_php_8_0_on_raspberry_pi_featured_image.png"></p><p><strong>PHP</strong> is a programming language that commonly used to create a web applications and dynamic websites. With each release of PHP, new features and various changes are introduced.</p><p>This tutorial shows how to install PHP 8.0 on Raspberry Pi.</p><p>Connect to Raspberry Pi via SSH and execute commands to download GPG key and add repository.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deb https://packages.sury.org/php/ $(lsb_release -sc) main&quot; | sudo tee /etc/apt/sources.list.d/php.list</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>Then install PHP 8.0 with command line interface (CLI):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y php8.0-common php8.0-cli</span><br></pre></td></tr></table></figure><p>Check PHP version when installation was finished:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php --version</span><br></pre></td></tr></table></figure><p>There are various PHP extensions that provides additional functionality. PHP extensions can be installed using the following syntax:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y php8.0-extension_name</span><br></pre></td></tr></table></figure><p>Execute the following command to install commonly used PHP extensions:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y php8.0-curl php8.0-gd php8.0-mbstring php8.0-xml php8.0-zip</span><br></pre></td></tr></table></figure><p>We can use -m option to check what extensions are installed.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -m</span><br></pre></td></tr></table></figure><p>If we want completely remove any package with a name that starts with php and anything related to it we can execute this command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt purge -y php.*</span><br></pre></td></tr></table></figure><h3 id="PHP-integration-with-MySQL-or-MariaDB">PHP integration with MySQL or MariaDB</h3><p>In order to use PHP with MySQL or MariaDB database we need to install the following extension:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y php8.0-mysql</span><br></pre></td></tr></table></figure><h3 id="PHP-integration-with-Apache">PHP integration with Apache</h3><p>If we want to integrate PHP with Apache HTTP server then install the following extension:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y libapache2-mod-php8.0</span><br></pre></td></tr></table></figure><p>Once installation was completed restart Apache.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Raspberry </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How To Install an FTP Server On Ubuntu with vsftpd</title>
      <link href="/2021/11/07/How-To-Install-an-FTP-Server-On-Ubuntu-with-vsftpd/"/>
      <url>/2021/11/07/How-To-Install-an-FTP-Server-On-Ubuntu-with-vsftpd/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction">Introduction</h2><p><strong>If you are looking to install an FTP server on Ubuntu, you can’t beat the simplicity of vsftpd .</strong></p><p>FTP stands for File Transfer Protocol. It is similar to HTTP (HyperText Transfer Protocol), in that it specifies a language for transferring data over a network. FTP is unencrypted by default, so by itself, it is not a good choice for secure transmission of data.</p><p>This guide will help you install and configure an FTP server with vsftpd on Ubuntu.</p><p><img src="/images/how-to-install-ftp-server-on-ubuntu-using-vsftpd.png" alt="how-to-install-ftp-server-on-ubuntu-using-vsftpd.png"></p><h2 id="Prerequisites">Prerequisites</h2><ul><li>Access to a user account with sudo privileges</li><li>Access to a terminal window/command line (Ctrl-Alt-T)</li><li>The apt package manager, included by default</li></ul><h3 id="Step-1-Update-System-Packages">Step 1: Update System Packages</h3><p>Start by updating your repositories – enter the following in a terminal window:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>The system proceeds to update the repositories.<br><img src="/images/sudo-apt-get-update-ubuntu-vsftpd.png" alt="sudo-apt-get-update-ubuntu-vsftpd.png"></p><h3 id="Step-2-Install-vsftpd-Server-on-Ubuntu">Step 2: Install vsftpd Server on Ubuntu</h3><p>A common open-source FTP utility used in Ubuntu is vsftpd. It is recommended for its ease of use.</p><ol><li>To install vsftpd, enter the command:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install vsftpd</span><br></pre></td></tr></table></figure><p>This is an example of the output in Ubuntu.</p><p><img src="/images/install-vsftpd-ubuntu-ftp.png" alt="install-vsftpd-ubuntu-ftp.png"></p><ol start="2"><li>To launch the service and enable it at startup, run the commands:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start vsftpd</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable vsftpd</span><br></pre></td></tr></table></figure><h3 id="Step-3-Backup-Configuration-Files">Step 3: Backup Configuration Files</h3><p>Before making any changes, make sure to back up your configuration files.</p><ol><li>Create a backup copy of the default configuration file by entering the following:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/vsftpd.conf  /etc/vsftpd.conf_default</span><br></pre></td></tr></table></figure><h3 id="Step-4-Create-FTP-User">Step 4: Create FTP User</h3><p>Create a new FTP user with the following commands:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -m testuser</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 21/tcp</span><br></pre></td></tr></table></figure><p><img src="/images/configure-firewall-to-allow-ftp-traffic.png" alt="configure-firewall-to-allow-ftp-traffic.png"></p><h3 id="Step-6-Connect-to-Ubuntu-FTP-Server">Step 6: Connect to Ubuntu FTP Server</h3><p>Connect to the FTP server with the following command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ftp ubuntu-ftp</span><br></pre></td></tr></table></figure><p>Replace <em><strong>ubuntu-ftp</strong></em> with the name of your system (taken from the command line).</p><p><strong>Log in</strong> using the <strong>testuser</strong> account and password you just set. You should now be successfully logged in to your FTP server.</p><h2 id="Configuring-and-Securing-Ubuntu-vsftpd-Server">Configuring and Securing Ubuntu vsftpd Server</h2><h3 id="Change-Default-Directory">Change Default Directory</h3><p>By default, the FTP server uses the <strong>/srv/ftp</strong> directory as the default directory. You can change this by creating a new directory and changing the FTP user home directory.</p><p>To change the FTP home directory, enter the following:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /srv/ftp/new_location</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -d /srv/ftp/new_location ftp</span><br></pre></td></tr></table></figure><p>Restart the <strong>vsftpd</strong> service to apply the changes:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure><p>Now, you can put any files you want to share via FTP into the <strong>/srv/ftp</strong> folder (if you left it as the default), or the <em><strong>/srv/ftp/new_location/</strong></em> directory (if you changed it).</p><h3 id="Authenticate-FTP-Users">Authenticate FTP Users</h3><p>If you want to let authenticated users upload files, edit the <strong>vsftpd.conf</strong> file by entering the following:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/vsftpd.conf</span><br></pre></td></tr></table></figure><p>Find the entry labeled <em><strong>write_enable=NO</strong></em>, and change the value to “<strong>YES</strong>.”</p><p><img src="/images/write-enable-yes-vsftpd-conf.png" alt="write-enable-yes-vsftpd-conf.png"><br>Save the file, exit, then restart the FTP service with the following:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure><p>This allows the user to make changes inside their home directory.</p><h2 id="Securing-FTP">Securing FTP</h2><p>Numerous exploits take advantage of unsecured FTP servers. In response, there are several configuration options in vsftpd.conf that can help secure your FTP server.</p><h3 id="Limit-User-Access">Limit User Access</h3><p>One method is to limit users to their home directory. Open <strong>vsftpd.conf</strong> in an editor and uncomment the following command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chroot_local_user=YES</span><br></pre></td></tr></table></figure><p>This is an example of the file in <strong>nano</strong>:<br><img src="/images/chroot-local-user-yes-vsftpd-conf.png" alt="chroot-local-user-yes-vsftpd-conf.png"></p><h3 id="Create-a-User-List-File">Create a User List File</h3><p>To create a list file, edit <strong>/etc/vsftpd.chroot_list</strong>, and add one user per line.</p><p>Instruct your FTP server to limit this list of users to their own home directories by editing <strong>vsftpd.conf</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chroot_local_user=YES</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chroot_list_file=/etc/vsftpd.chroot_list</span><br></pre></td></tr></table></figure><p>The image ilustrates the edits that were made:<br><img src="/images/chroot-list-file-vsftpd.png" alt="chroot-list-file-vsftpd.png"><br>Restart the <strong>vsftpd</strong> service:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure><p>By default, the list of blocked users from FTP access is stored in <strong>/etc/ftpusers</strong>. To add blocked users, edit this file and add one user per line.</p><h3 id="Encrypt-Traffic-With-FTPS">Encrypt Traffic With FTPS</h3><p>Another method to secure your FTP server is to encrypt the traffic. This is done by using <strong>FTPS</strong> – File Transfer Protocol over SSL (Secure Socket Layer).</p><p>For this to work, users need to be set up with a shell account on the FTP server. This will add a layer of secure encryption to your FTP traffic.</p><ol><li>Start by creating a new certificate with openssl. To do so, run the command:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/vsftpd.pem -out /etc/ssl/private/vsftpd.pem</span><br></pre></td></tr></table></figure><ol start="2"><li><p>Provide the required information when prompted or keep the default configuration by pressing <strong>Enter</strong>.</p></li><li><p>Next, open your <strong>vsftpd.conf</strong> file in an editor and change the line <strong>ssl_enable=NO</strong> to <strong>ssl_enable=YES</strong>:</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssl_enable=YES</span><br></pre></td></tr></table></figure><ol start="4"><li>Then, add the following lines:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rsa_cert_file=/etc/ssl/private/vsftpd.pem</span><br><span class="line">rsa_private_key_file=/etc/ssl/private/vsftpd.pem</span><br><span class="line">allow_anon_ssl=NO</span><br><span class="line">force_local_data_ssl=YES</span><br><span class="line">force_local_logins_ssl=YES</span><br><span class="line">ssl_tlsv1=YES</span><br><span class="line">ssl_sslv2=NO</span><br><span class="line">ssl_sslv3=NO</span><br><span class="line">require_ssl_reuse=NO</span><br><span class="line">ssl_ciphers=HIGH</span><br><span class="line">pasv_min_port=40000</span><br><span class="line">pasv_max_port=50000</span><br></pre></td></tr></table></figure><ol start="5"><li><p>Save the changes and exit the file.</p></li><li><p>Finally, restart the service to apply the changes:</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> For more information on SSL configurations and certificates, please see the Ubuntu <a href="https://ubuntu.com/server/docs">FTP server documentation</a>. Also, it’s worth noting that FTPS is a different protocol that SFTP. SFTP stands for Secure File Transfer Protocol, and it’s an entirely different protocol.</p><h3 id="Conclusion">Conclusion</h3><p>Now, you should have installed an FTP server on Ubuntu with <strong>vsftpd</strong>.</p><p>You should now be able to configure your user lists and accounts, and connect to your new FTP server. We also detailed the risks of the FTP protocol, and how to mitigate them.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
